package mk.com.iwec.elibrary;

import java.awt.print.Book;
import java.sql.Connection;
import java.sql.Date;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import mk.com.iwec.elibrary.interfaces.IBook;

public class BookDAO extends Books implements IBook {

	public BookDAO(int id, String title, int authorId, int publisherId, int issueNumber, Date yearOfRelease,
			String isbn, String genre, int formats_id, String cover) {
		super(id, title, authorId, publisherId, issueNumber, yearOfRelease, isbn, genre, formats_id, cover);
	}

	public BookDAO(Connection connection) {
	}

	private static final String url = "jdbc:postgresql://localhost:5432/e-library";
	private static final String user = "postgres";
	private static final String password = "0110";

	public static Connection getConnection() throws SQLException {
		return DriverManager.getConnection(url, user, password);
	}

	public static void createBook(String title, int authorId, int publisherId, int issueNumber, Date yearOfRelease,
			String isbn, String genre, int formats_id, String cover) throws SQLException {
		Connection conn = null;
		PreparedStatement stmt = null;
		try {
			conn = DriverManager.getConnection(url, user, password);
			stmt = conn.prepareStatement("insert into books "
					+ "(id,title,author_id,publisher_id,issue_number,isbn,year_of_release,cover,formats_id,genre)"
					+ "VALUES (2,'Design Patterns',1,1,0002,'QWERTYUIOPASD','2020-07-11','Crna',2,'Drama');");
			stmt.setString(1, title);
			stmt.setInt(2, authorId);
			stmt.setInt(3, publisherId);
			stmt.setInt(4, issueNumber);
			stmt.setString(5, isbn);
			stmt.setString(6, genre);
			stmt.setInt(7, formats_id);
			stmt.setString(8, cover);
			stmt.executeUpdate();
		} finally {
			if (stmt != null) {
				stmt.close();
			}
			if (conn != null) {
				conn.close();
			}
		}
	}
//	public void createBook(Books book) {
//		String sql = "insert into books "
//				+ "(id,title,author_id,publisher_id,issue_number,isbn,year_of_release,cover,formats_id,genre)\r\n"
//				+ "VALUES (2,'Design Patterns',1,1,0002,'QWERTYUIOPASD','2020-07-11','Crna',2,'Drama')";
//		try (Connection connection = getConnection(); PreparedStatement statement = connection.prepareStatement(sql)) {
//			try {
//				statement.setInt(1, book.getId());
//				statement.setString(2, book.getTitle());
//				statement.setInt(3, book.getAuthorId());
//				statement.setInt(4, book.getPublisherId());
//				statement.setInt(5, book.getIssueNumber());
//				statement.setString(6, book.getIsbn());
//				statement.setDate(7, book.getYearOfRelease());
//				statement.setString(8, book.getCover());
//				statement.setInt(9, book.setFormats_id(getFormats_id()));
//				statement.setString(10, book.getGenre());
//
//				statement.executeUpdate();
//			} catch (Exception ex) {
//				ex.getMessage();
//			}
//		} catch (SQLException e) {
//			// TODO Auto-generated catch block
//			e.printStackTrace();
//		}
//
//	}

	@Override
	public Books readBook(int Id) {
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		Books book = null;
		try {
			stmt = conn.prepareStatement("SELECT * FROM books WHERE id = 1");

			stmt.setInt(1, Id);
			rs = stmt.executeQuery();
			if (rs.next()) {
				book = new Books();
				book.setId(rs.getInt("id"));
				book.setTitle(rs.getString("title"));
			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} finally {
			try {
				if (rs != null) {

					rs.close();
				}
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		if (stmt != null) {
			stmt.close();
		}
		if (conn != null) {
			conn.close();
		}
	}return book;

	}

	@Override
	public void updateBook(Books book) {
		// TODO Auto-generated method stub

	}

	@Override
	public void deleteBook(int id) {
		// TODO Auto-generated method stub

	}

	@Override
	public void createBook(Books book) {
		// TODO Auto-generated method stub

	}

}
